람다식
데이터 처리부에 제공되는 함수 역할을 하는 매개변수를 가진 중괄호 블록이다.데이터 처리부는 람다식을 받아 매개변수에 데이터를 대입하고 중괄호를 실행시켜 처리한다.
익명 구현 객체이며 인터페이스 구현 객체이다.
단 하나의 추상 메소드만 가져야 하며,이를 함수형 인터페이스(functional interface)라고 한다.
@FunctionalInterface 어노테이션을 붙혀준다.선택 사항이지만 컴파일 과정에서 추상 메소드가 하나인지 검사한다.


함수형 프로그래밍(functional programming)
함수를 정의하고 이 함수를 데이터 처리부로 보내 데이터를 처리하는 기법. 데이터 처리부는 데이터만 가지고 있을 뿐, 처리 방법이 정해져 있지 않아 외부에서 제공된 함수에 의존한다.

함수형 프로그래밍의 데이터 처리부
제공된 함수의 입력 값으로 데이터를 넣고 함수에 정의된 처리 내용을 실행한다. 동일한 데이터라도 함수A를 제공해서 처리한 결과와 함수B를 제공해서 처리하는 결과는 다를 수 있다.
이것이 함수형 프로그래밍의 특징으로, 데이터 처리의 다형성이다.

람다식 : (매개변수,...) -> {처리 내용}

Calculable 인터페이스 생성                   
public interface Calculable {                
    //추상메소드                                
    void calculate(int x, int y);                 
}

Calculable의 익명 구현 객체 생성
new Calculable(){
@Override
public void calculate(int x, int y){처리내용};
}

람다식으로 표현 -> 추상 메소드인 calculate() 는 두 개의 매개변수를 가지므로 (x, y)로 표현되고, 화살표 -> 뒤에 calculate()의 싱행 블록이 온다.

(x, y) -> {처리내용};



매개변수가 없는 람다식
함수형 인터페이스의 추상 메소드에 매개변수가 없을 경우.
실행문이 두 개 이상일 경우에는 중괄호를 생략할 수 없고, 하나일 경우에만 생략할 수 있다
( ) -> {
    실행문;
    실행문
}

( ) -> 실행문


매개변수가 있는 람다식
함수형 인터페이스의 추상메소드에 매개변수가 있을 경우,
매개변수를 선언할 때 타입은 생략 할 수 있고, 구체적인 타입 대신에 var를 사용할 수 도 있지만 일반적으로 생략한다.
실행문이 하나일 경우 중괄호 생략,매개변수가 하나일 경우 괄호 생략가능하지만 타입 또는 var를 붙일 수 없다.

(타입 매개변수,..) -> {
    실행문;
    실행문;
}

(타입 매개변수,...) -> 실행문

매개변수 -> {
    실행문;
    실행문;
}

매개변수 -> 실행문



리턴값이 있는 람다식 
함수형 인터페이스의 수상 메소드에 리턴값이 있을 경우.
return 문 하나만 있을 경우에는 중괄호와 return 키워드를 생략할 수 있다.리턴 값은 연삭식 또는 리턴 값이 있는 메소드 호출로 대체할 수 있다.

(매개변수,...) -> {
    실행문;
    return 값;
}

(매개변수, ...) -> 값



메소드 참조 
메소드를 참조해서 매개변수의 정보 및 리턴 타입을 알아내 람다식에서 불 필요한 매개변수를 제거하는 것을 목적으로 한다.

(left, right) -> Math.max(left,right);

(left,right) -> Math::max

정적 메소드를 참조할 경우에는 클래스 이름 뒤에 ::기호를 붙이고 정적 메소드 이름을 기술
클래스::메소드

인스턴스 메소드일 경우 먼저 객체를 생성한 다음 참조 변수 뒤에 :: 기호를 붙이고 인스턴스 메소드 이름을 기술
참조변수::메소드



매개변수의 메소드 참조
a 매개변수의 메소드를 호출해서 b 매개변수를 매개값으로 사용
(a, b) -> {a.instanceMethod(b);}

a의 클래스 이름 뒤애 :: 를 붙이고 메소드 이름을 기술한다.정적 메소드 참조와 동일하지만, a의 인스턴스 메소드가 사용된다.
(a, b) -> {클래스::instanceMethod}


생성자 참조
생성자를 참조한다는 것은 객체를 생성하는 것을 의미한다.람다식이 단순히 객체를 생성하고 리턴하도록 구성된다면 람다식을 생성자 참조로 대치할 수 있다.
(a,b) -> {reutrn new 클래스(a, b);}

클래스 이름 뒤에 :: 붙이고 new 연산자를 기술
클래스::new
