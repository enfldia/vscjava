컬렉션 프레임워크
자바는 자료구조(Data Structure)를 바탕 객체들의 추가, 삭제, 검색할 수 있도록 관련된 인터페이스와 클래스들을 java.utill 패키지들의 총칭


컬렉션 프레임워크 인터페이스의 종류
List, Set, Map

collection 인터페이스
List와  Set 은 객체를 추가, 삭제, 검색하는 방법에 공점이 있기 때문에 공통된 메소드만 따로 모아 놓은 것.
collection 인터페이스 안에 List 인터페이스와 Set 인터페이스가 포함되어 있다.

각 인테페이스들의 특징

List
특징- 순서를 유지하고 저장, 중복 저장 가능
구현 클래스- ArrayList, Vector, LinkedList

Set
특징- 순서를 유지하지 않고 저장, 중복 저장 안됨
구현 클래스- HashSet, TreeSet

Map
특징- 키와 값으로 구성된 엔트리 저장, 키는 중복 저장 안됨
구현 클래스- HashMap, Hadhtable, TreeMap, Properties

----------------------------------------------------------------------------------------
List 컬렉션
객체를 인덱스로 관리하여 저장시 인덱스가 부여된다.
인덱스로 객체 검색,삭제하는 기능을 제공한다.

List 컬렉션에서 공통으로 사용하는 메소드
객체 추가       add(E e)                        주어진 객체를 맨 끝에 추가
                add(int index,E element)        주어진 인덱스에 객체를 추가
                set(int index,E element)        주어진 인덱스의 객체를 새로운 객체로 바꿈

객체 검색       contains(Object o)              주어진 객체가 저장되어 있는지 여부
                get(int index)                  주어진 인덱스에 저장된 객체를 리턴
                isEmpty()                       컬렉션이 비어 있는지 조사
                size()                          저장되어 있는 전체 객체 수를 리턴

객체 삭제       clear()                         저장된 모든 객체를 삭제
                remove(int index)               주어진 인덱스에 저장된 객체를 삭제
                remove(Object o)                주어진 객체를 삭제

----------------------------------------------------------------------------------------
ArrayList
List 컬렉션에서 가장 많이 사용되며,ArrayList에 객체를 추가하면 내부 배열에 객체가 저장된다.일반 배열과 차이점은 제한 없이 객체를 추가할 수 있다
List 컬렉션은 객체 자체를 저장하는게 아니라 객체의 번지를 저장한다.동일한 객체를 중복 저장 가능하다.null도 저장 가능.
객체를 추가하면 인덱스 0 부터 차례대로 저장된다.특정 인덱스의 객체를 제거하면 바로 뒤 인덱스부터 마지막 인덱스까지 모두 앞으로 인덱스가 1씩 당겨진다.
반대로 특정 인덱스로 삽입도 같다.따라서 빈번한 객체 삭제와 삽입이 일어나는 곳에 사용은 바람직하지 않다.-->(LinkedList가 적합함)

List<E> list = new ArrayList<E>();  파라미터E에 지정된 타입의 객체만 저장.
List<E> list = new ArrayList<>();   List의 객체와  ArrayList의 객체 타입이 같으면 생략 가능
List list= new ArryaList();         모든 타입의 객체 저장 가능

Vector
ArrayList와 동일한 내부 구조를 가지고 있지만 동기화된(synchronized)메소메소드로 구성되어 있기 때문에 멀티 스레드가 동시에 메소드들을 실행할 수 없다.
멀티 스레드 환경에서도 안전하게 객체를 추가,삭제할 수 있다.

Map<K, V> map = new Hashtable<K, V>();
Map<K, V> map = new Hashtable<>();
Map map = new Hashtable();

pPoperties드로 구성되어 멀티 스레드가 동시에 vector() 메소드를 실행할 수 없다.
Properties는 Hashtable의 자식 클래스이기 때문에 Hashtable의 특징을 그대로 가지고 있다.

그 결과 멀티 스레드 환경에서 안전하게 객체를 추가 또는 삭제할 수 있다.
반대로 ArrayList로 다중 스레드로 작업을 하면 두 스레드가 동시에 메소드를 호출할 수 있기 때문에 경합이 발생되어 하나만 저장되기 때문이다.

List<E> list = new Vector<E>();     지정 타입의 객체만 저장
List<E> list = new Vector<>();      타입이 같으면 생략 가능
List list = new Vertor();           모든 타입 객체 저장 가능

LinkedList
ArrayList와 사용 방법은 동일하지만 내부 구조는 완전히 다르다.인접 객체를 체인처럼 연결해서 관리한다.
그렇기에 특정 위치에서 객체를 삽입하거나 삭제하면 바로 앞뒤 링크만 변경하면 되므로 빈번한 객체 삭제와 삽입이 일어나느 곳에서 ArrayList보다 좋은 성능을 발휘한다.

List<E> list = new LinkedList<E>(); 지정 타입의 객체만 저장
List<E> list = new LinkedList<>();  타입이 같으면 생략 가능
List list = new LinkedList();       모든 타입 객체 저장 가능

----------------------------------------------------------------------------------------
Set 컬렉션
저장 순서가 유지되지 않는다.객체를 중복 저장할 수 없으며 null도 하나만 저장이 가능하다. 순서와 상관 없이 중복이 허용되지 않기 때문에 수학의 집하에 비유된다.
저장될 때와 찾을 때 순서가 다를 수 있다.
인덱스로 관리하지 않기 때문에 인덱스를 매개값으로 갖는 메소드가 없다.

Set 컬렉션에서 고통으로 사용하는 메소드()

객체 추가-  boolean add(E e)            주어진 객체를 성공적으로 저장하면 true를 리턴하고 중복 객체면 false를 리턴

객체 검색   boolean contains(Object o)  주어진 객체가 저장되어 있는지 여부
            isEmpty()                   컬렉션이 비어 있는지 조사
            iterator<E> iterator()      저장된 객체를 한 번씩 가져오는 반복자 리턴
            int size()                  저장되어 있는 전체 객체 수 리턴

객체 삭제   void clear()                저장된 모든 객체를 삭제
            boolean remove(Objet o)     주어진 객체를 삭제
----------------------------------------------------------------------------------------
HashSet
Set 컬렉션 중에서 가장 많이 사용된다.동일한 객체는 중복 저장하지 않는다.여기서 동일한 객체란 동등한 객체를 말한다.
HashSet은 다른 객체라도 hashCode() 메소드의 리턴값이 같고, equals() 메소드가 ture를 리턴하면 동일한 객체라 판단하고 중복 저장하지 않는다.
같은 문자열을 갖는 String 객체는 동일한 객체로 간주한다.hashCode()의 리턴값이 같고 equals()의 리턴값이 true가 나오기 때문이다.

Set<E> set = new HashSet<E>();  //E에 지정된 타입의 객체만 저장
Set<E> set = new HashSet<>();   //E에 지정된 타입의 객체만 저장
Set set = new HashSet();        //모든 타입의 객체 저장

나이와 이름이 동일할 경우 동일한 해시코드를 리턴하도록 HashCode()를 재정의하고,equals() 메소드가 ture를 리턴하도록 재정의

@Override
public int hashCode(){
    return name.hashCode() + age; //name과 age가 같으면 동일한 해쉬코드를 리턴됨
}
@Override
public boolean equals(Object obj){
    if(obj instanceof Member target){
        return target.name.equals(name) && (target.age==age); //name과 age값이 같으면 true 리턴
    } else{
        return false;
    }
}

set 컬렉션은 인덱스로 객체를 검색해서 가져오는 메소드가 없다. 대신 객체를 한 개씩 반복해서 가져와야 하는데, 두 가지 방법이 있다.

for 문을 이용하난 방법
Set<E> set = new HashSet<>();
for(E e : set){
    System.out.println(e);
}

set 컬렉션의 iterrator() 메소드로 반복자를 얻어 불러오는 방법.
Set<E> set = new HashSet<>();
Iterator<E> intreator = set.iterator();

iterator는 Set 컬렉션의 객체를 가져오거나 제거하기 위한 메소드를 제공한다.
boolean         hasNext()               가져올 객체가 있다면 true,없으면 false
P               next()                  컬렉션에서 하나의 객체를 가져온다.
void            remove()                next()로 가져온 객체를 Set 컬렉션에서 제거

while(iterator.hasNext()){
    E e = iterator.next();
}

----------------------------------------------------------------------------------------
Map 컬렉션
Map 컬렉션은 키(key)와 값(value)로 구성된 엔트리(Entry)객체를 저장한다.키와 값은 모두 객체이다.
키는 중복 저장할 수 없지만 값은 중복 저장할 수 있다.
기존에 저장된 키와 동일한 키로 값을 저장하면 기존의 값은 없어지고 새로운 값으로 대치된다.


Map 컬렉션에는 HashMap, Hashtable, LinkedHashMap, pPoperties, TreeMap 등이 있다.
Properties는 Hashtable의 자식 클래스이기 때문에 Hashtable의 특징을 그대로 가지고 있다.

Map 컬렉션은 키로 객체들을 관리하기 때문에 키를 매개값으로 갖는 메소드가 많다.

객체 추가       V put(K key,V value)                주어진 키와 값을 추가,저장이 되면 값을 리턴

객체 검색       boolean containsKey(Object key)     주어진 키가 있는지 여부
                boolean containsValue(Object Value) 주어진 값이 있는지 여부
                Set<Map.Enrty<K,V>> entrySet()      키와 값의 쌍으로 구성된 모든 Map.Entry 객체를 Set에 담아서 리턴
                V get(Object key)                   주어진 키의 값을 리턴
                boolean isEmpty()                   컬렉션이 비어 있는지 여부
                Set<k> keySet()                     모든 키를 Set 객체에 담아서 리턴
                int size()                          저장된 키의 총 수를 리턴
                Collection<V> values()              저장된 모든 값 Collection에 담아서 리턴

객체 삭제       void clear()                        모든 Map.Entry(키와 값)를 삭제
                V remove(Object key)                주어진 키와 일치하는 Map.Entry 삭제.삭제가 되면 값을 리턴


HashMap
키로 사용할 객체가 hashCode() 메소드의 리턴값이 같고 equals() 메소드가 true를 리턴할 경우, 동일 키로로 보고 중복 저장을 허용하지 않는다.

Map<K, V> map = new HashMap<K, V>();    //K 타입의 키, V 타입의 값 객체만 저장
Map<K, V> map = new HashMap<>();        //K 타입의 키, V 타입의 값 객체만 저장
Map map = new HashMap();                //모든 타입의 키와 값을 객체로 저장

예제
//키 Set 컬렉션을 얻고, 반복해서 키와 값을 얻기
Set<String> keySet = map.keySet();                                      //keySet() 메소드로 map의 모든 키를 String 타입의 keySet 객체에 담아서 리턴. 
Itreator<String> keyIterator = keySet.itreator();                       //keySet 객체의 값을 하나씩 가져오기 위해 반복자(Iterator) 메소드 사용해서 keyIterator 객체 생성
    while(keyIterator.hasNext()){                                       //hasNext() 메소드를 사용해서 keyIterator 에 가져올 객체가 있으면  ture리턴, 없으면 false 리턴
        String k = keyIterator.next();                                  //next() 메소드를 사용해서 keyIterator의 객체(여기선 키값)을 가져와 String k 에 대입
        Integer v = map.get(k);                                         //get() 메소드를 사용해서 map컬렉션에서 k를 키 갖는 Entry의 값(value)을 가져와서 Integer v 에 대입  
        System.out.println(k + " : " + v);                              //기본 타입인 int 가 아닌 포장(wrapper)객체인 Integer를 사용하는 건 
    }                                                                   //컬렉션 객체는 기본 타입의 값은 저장할 수 없고, 객체만 저장할 수 있다.

//엔트리 Set 컬렉션을 얻고, 반복해서 키와 값을 얻기
Set<Entry<String, Integer>> entrySet = map.entrySet();                  //entrySet() 메소드로 키와 값의 쌍으로 구성된 모든 Map.Entry 객체를 entrySet에 담아서 리턴
Itreator<Entry<string, Integer>> entryIterator = entrySet.iterator();   //entrySet 객체의 값을 하나씩 가져오기 위해 반복자(Iterator) 메소드를 사용해서 entryIterator 객체 생성
    whlie(entryIterator.hasNext()){                                     //hasNext() 메소드를 사용해서 entryIterator 에 가져올 객체가 있으면 true, 없으면 false 리턴
        Entry<String, Integer> entry = entryIterator.next();            //next() 메소드를 사용해서 entryIterator의 객체 값을 Entry<String, integer> 타입의 entry 객체에 대입
        String k = entry.getKey();                                      //getKey() 메소드를 사용해서 entry 객체의 키 값을 String 타입의 k 객체에 대입
        Integer v = entry.getValue();                                   //getValue() 메소드를 사용해서 entry 객체의 벨류 값을 Integer 타입의 v 객체에 대입
        System.out.println(k + " : " + v);
    }


Hashtable
Hashtable은 HashMap과 동일한 내부 구조를 가지고 있다.
Hashtable은 순서가 있고 동기화된 (synchronized)메소드로 구성되어 있기 때문에 멀티 스레드가 동시에 메소드들을 실행할 수 없다.
멀티 스레드 환경에서도 안전하게 객체를 추가,삭제할 수 있다.

Map<K, V> map = new Hashtable<K, V>();
Map<K, V> map = new Hashtable<>();
Map map = new Hashtable();

Properties
Properties는 Hashtable의 자식 클래스이기 때문에 Hashtable의 특징을 그대로 가지고 있다.
Properties는 키와 값을 String 타입으로 제한한 컬렉션이다.Properties는 주로 확장자가 .properties인 프로퍼티 파일을 읽을 때 사용한다.
키와 갑이 = 기호로 연결되어 있는 텍스트 파일이다.

객체를 생성하고, load() 메소드로 프로퍼티 파일의 내용을 메모리로 로드한다.

Properties properties = new Properties();
properties.load(Xxx.getResourceAsStream("database.propertise"));

일반적으로 프로퍼티 파일은 클래스 파일들과 함께 저장된다.따라서 클래스 파일을 기준으로 상대 경로를 이용해서 읽는 것이 편리하다.
Class 객체의 getResourceAsStream() 메소드는 주어진 상대 경로의 리소스 파일을 읽는 InputStream을 리턴한다.

----------------------------------------------------------------------------------------

검색 기능을 강화시킨 컬렉션
TreeSet과 TreeMap 이 있다.

TreeSet
이진 트리(binary Tree)를 기반으로 한 Set 컬렉션이다.이진 트리는 어러 개의 노드(node)가 트리 형태로 연결된 구조로,
루트 노드(root node)라고 불리는 하나의 노드에서 시작해 각 노드에 최대 2개의 노드를 연결할 수 있는 구조 // -> 최상단 노드(루트 노드),1개의 부모 노드-> 최대 2개의 자식노드 연결 가능 
TreeSet에 객체를 저장하면 자동으로 정렬이된다. 부모 노드의 객체와 비교해서 낮은 것은 왼쪽 자식 노드에. 높은 것은 오른쪽 자식 노드에 저장한다.

TreeSet<E> treeSet = new TreeSet<E>();
TreeSet<E> treeSet = new TreeSet<>();

Set 타입의 변수에 대입해도 되지만 검색 관련 메소드가 TreeSet에만 정의 되어 있다.

E                   first()                 제일 낮은 객체를 리턴
E                   last()                  제일 높은 객체를 리턴
E                   lower(E e)              주어진 객체보다 바로 아래 객체를 리턴
E                   higher(E e)             주어진 객체보다 바로 위 객체를 리턴
E                   floor(E e)              주어진 객체와 동등한 객체가 있으면 리턴, 만약 없다면 주어진 객체의 바로 아래의 객체를 리턴
E                   ceiling(E e)            주어진 객체와 동등한 객체가 있으면 리턴, 만약 없다면 주어진 객체의 바로 위의 객체를 리턴
E                   pollFirst()             제일 낮은 객체를 꺼내오고 컬렉션에서 제거함
E                   pollLast()              제일 높은 객체를 꺼내오고 컬레션에서 제거함
Iterator<E>         descendingIterator()    내림차순으로 정렬된 Iterator를 리턴
NavigableSet<E>     descendingSet()         내림차순으로 정렬된 NavigableSet을 리턴
NavigableSet<E>     headSet(
                        E toElement,        주어진 객체보다 낮은 객체들을 NavigableSet으로 리턴,
                        boolean inclusive   주어진 객체 포함 여부는 두번째 매개값에 따라 달라짐.(ture,false)
                    )
NavigableSet<E>     tailSet(
                        E fromElement,      주어진 객체보다 높은 객체들을 NavigableSet으로 리턴,
                        boolean inclusive   주어진 객체 포함 여부는 두번째 매개값에 따라 달라짐.
                    )
NavigableSet<E>     subSet(
                        E fromElement,          시작과 끝으로 주어진 객체 사이의 객체들을 NavigableSet으로 리턴,
                        boolean fromInclusive   시작과 끝 객체의 포함 여부는 두 번째, 네 번째  매개값에 따라 달라짐
                        E toElement,        
                        boolean toInclusive 
                    )

----------------------------------------------------------------------------------------
TreeMap
이진 트리를 기반으로 한 Map 컬렉션이다.TreeSet과의 차이점은 키와 값이 저장된 Entry를 저장한다는 점이다.
엔트리를 저장하면 키를 기준으로 자동 정렬되는데, 부모 키값과 비교해서 낮은 것은 왼쪽, 높은 것은 오른쪽 자식 노드에 Entry 객체를 저장한다.

TreeMap<K, V> treeMap = new TreeMap<k, V>();
TreeMap<K, V> treeMap = new TreeMap<>();

Map 타입 변수에 대입해도 되지만 TreeMap으로 대입한 이유는 검색 관련 메소드가 TreeMap에만 정의되어 있기 때문이다.

Map.Entry<K,V>          firstEntry()        제일 낮은 Map.Entry를 리턴
Map.Entry<K,V>          lastEntry()         제일 높은 Map.Entry를 리턴
Map.Entry<K,V>          lowerEntry(key)     주어진 키보다 바로 아래 Map.Entry 를 리턴
Map.Entry<K,V>          higherEntry(key)    주어진 키보다 바로 위 Map.Entry 를 리턴
Map.Entry<K,V>          floorEntry(K key)   주어진 키와 동등한 키가 있으면 해당 Map.Entry를 리턴, 없으면 바로 아래 Map.Entry 리턴
Map.Entry<K,V>          ceilingEntry(K key) 주어진 키와 등등한 키가 있으면 해당 Map.Entry를 리턴, 없으면 바로 위 Map.Entry 리턴
Map.Entry<K,V>          pollFirstEntry()    제일 낮은 Map.Entry를 꺼내오고 컬렉션에서 제거함
Map.Entry<K,V>          pollLastEntry()     제일 높은 Map.Entry를 꺼내오고 컬렉션에서 제거함
NavigableSet<K>         descendingKeySet()  내림차순으로 정렬된 키의 NavigableSet을 리턴
NavigableMap<K,V>       descendingMap()     내림차순으로 정렬된 Map.Entry의 NacigableMap을 리턴