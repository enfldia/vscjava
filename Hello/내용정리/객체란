객체 지향 프로그래밍이란
    부품의 해당하는 객체들을 먼저 만들고, 이 객체들을 하나씩 조립해서 완성되는 프로그램을 만드는 기법을
    객체 지향 프로그램(Object Oriented Programming-OOP) 이라한다.

객체(Object)
    물리적으로 존재하거나 개념적인 것 중 다른 것과 식별 가능한 것
    객체는 속성과 동작으로 구성된다,
    속성을 필드(field), 동작을 메소드(method)라고 한다.
    현실 세계의 객체를 소프트웨어 객체로 설계하는 것을 객체 모델링(object modeling)이라 한다,

객체의 상호작용
    객체와 객체 간의 상호작용으로 이루어져 있다.

객체 간의 관계
    객체는 단독으로 존재할 수 있지만 대부분 다른 객체와 관계를 맺고 있다.
    관계의 종류에는 집합 관계. 사용 관계. 상속 관계가 있다.

집합 관계
    완성품과 부품의 관계를 말한다.

사용 관계
    다른 객체의 필드를 읽고 변경하거나 메소드를 호출하는 관계

상속 관계
    A가 B의 특징(필드,메소드)를 물려 받는다면 B(부모)와 A(자식)는 상속 관계이다.

객체 지향 프로그래밍의 특징
    객체 지향 프로그램의 특징은 캡슐화, 삭송, 다형성이다.

캡슐화(Encapsulation)
    객체의 데이터(필드), 동작(메소드)을 하나로 묶고 실제 구현 내용을 외부에 감추는 것
    객체 내부의 구조를 알지 못하며,객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있다.
    외부의 잘못된 사용으로 객체가 손상 되지 않도록 보호하기 위해 캡슐화를 한다.

    접근 제한자(Access Modifier)
        캡슐화된 멤버를 노출시킬 것이닞 숨길 것인지 결정하는 존재

상속(Inheritance)
    부모 객체의 필드와 메소드를 자식 객체에게 물려주어 자식 객체가 사용할 수 있도록 한다.
    상속을 하는 이유는
        -코드의 재사용성을 높여 자식 객체에서 중복 코딩을 하지 않아도 된다.
        -부모 객체의 필드와 메소드를 수정하면 모든 자식 객체에도 수정되므로 유지보수 시간을 최소화시켜준다.

다형성(Polymorphism)
    사용 방법은 동일하지만 구성하는 객체에 따라 다양한 결과가 나오는 성질
    다형성을 구현하기 위해서는 자동 타입 변환과 재정의 기술이 필요하다.

객체와 클래스
    객체를 생성하려면 설계도에 해당하는 클래스(Class)가 필요하다.
    클래스로부터 생성된 객체를 해당 클래스의 인스턴스(Instance)라고 부른다.,

클래스 선언
    객체 생성을 위한 설계도를 작성하는 작업이다.
    객체를 생성(생성자)하고, 객체가 가져야 할 데이터(필드)가 무엇이고, 객체의 동작(메소드)은 무엇인지 정의하는 내용이 포함된다.
        -하나의 소스 파일에 복수 개의 클래스를 선언할 경우,소스 파일명과 동인할 클래스만 공개 클래스(public class)로 선언할 수 있다.
    클래스는 두 가지의 용도로 라이브러리(library)클래스와 실행클래스가 있다.
        -라이브러리 클래스는 실행할 수 없으며 다른 클래스에서 이용하는 클래스
        -실행 클래스는 main() 메소드를 가지고 있는 실행 가능한 클래스

객체 생성과 클래스 변수
    객체를 생성하려면 객체 생성 연산자인 new가 필요하며, new 연산자 뒤에는 생성자 호출 코드가 클래스() 형태로 위치한다.

클래스의 구성 멤버
    생성자, 필드, 메소드를 클래스 구성 멤버라 한다.
    -필드(field) 객체의 데이터를 저장하는 역할.
    -생성자(constructor) 객체의 초기화 역할을 담당한다. 리턴 타입이 없고 이름은 클래스와 동일하다.
    -메소드(mathod) 객체가 수행할 동작.다른 프로그램 언어에서는 함수라 하기도 하는데. 
                    객체 내부의 함수는 메소드라 부른다.객체와 객체간의 상호 작용을 위해 호출된다.
    

필드(field)
    객체의 데이터를 저장한다.
    객체의 데이터에는 고유 데이터와 현재 상태 데이터, 부품 데이터가 있다.
    반드시 클래스 블록에서 선언되어야한다.
    기본 타입(byte, short, int, long, float, double, boolean)과 참조 타입(배열,클래스,인터페이스)의 모든 데이터의 종류를 저장할 수 있다.