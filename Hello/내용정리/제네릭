제네릭
제네릭이란 결정되지 않은 타입을 파라미터로 처리하고 실제 사용할 때 파라미터를 구체적인 타입으로 대체시키는 기능
box 클래스에서 결정되지 않은 content의 타입을 T라는 타입 파라미터로 정의한 것이다.
T라는 타입 파라미터는 단지 이름일 뿐이고 A 부터 Z까지 어떠한 것도 쓸 수 있다.
주의할 점은 파라미터를 대체하는 타입은 클래스 및 인터페이스다,기본 타입은 타입 파라미터의 대체 타입이 될 수 없다.
public class Box<T>{
    public T content;
}
그리고 변수를 선언하 때와 동일한 타입으로 호출하고 싶다면 생성자 호출 시 생성자에는 타입을 생략할 수 있다.
Box<String> box = new Bodx<String>;  -->  Box<String> box = new Box<>();


제네릭 타입 
결정되 않은 타입을 파라미터로 가지는 클래스와 인터페이스를 말한다. 선언부에 '< >' 부호가 붙고 그 사이에 타입 파라미터들이 위치한다.
기본적으로 Object 타입으로 간주 되므로 Object가 가지고 있는 메소드를 호출 할 수 있다.
object의 equals() 메소드를 이용해서 box의 내용물 비교할 수 있다.
-제네릭 타입 클래서 선언
public class Box<T>{
    -제네릭 타입 필드 선언
    public T content;
    -메소드 선언
    public boolean compare(box<T> other){
        boolean result = content.equals(other.content);
        return result
}
}
-메소드 실행
boolean result1 = box1.compare(box2);
System.out.plintln("result1:"+ result1);


제네릭 메소드
타입 파라미터가 메소드 선언부에 정의된다. 리턴 타입 앞에 '< >' 기호를 추가하고 타입파라미터를 정의한 뒤, 리턴 타입과 매개변수 타입타입에서 사용된다.
public      <A,B,...>        리턴 타입  메소드명(매개변수,...){메소드}
        타입 파라미터 정의

boxing() 메소드는 타입 파라미터로 <T>를 정의하고 매개변수 타입과 리턴 타입에서 T를 내용물로 갖는 Box 객체이다.
public <T> Box<T> boxing(T t){메소드}

타입 파라미터 T는 매개값이 어떤 타입이냐에 따라 컴파일 과정에서 구체적인 타입으로 대체된다.
1- Box<Integer> box1 = boxing(100); --> 100의 클래스 타입은 Integer 이므로 타입 파라미터 T는  Integer로 대체되어 Box<Integer>가 리턴된다
2- Box<String> box2 = boxing("안녕하세요"); --> "안녕하세요"의 클래스 타입은 String이므로 타임 파라미터 T는 String으로 대체되어  Box<String>이 리턴된다.

제한된 타입 파라미터
타임 파라미터를 대체하는 구체적인 타입을 제한할 수 있다.
숫자를 연산하는 제네릭 메소드는 대체 타입으로 Number 또는 자식 클래스 (Byte, Shot, Integer, Long, Double)로 제한할 필요가 있다.
이처럼 모든 타입으로 대체할 수 없고, 특정 타입과 자식 또는 구현 관계에 있는 타입만 대체할 수 있는 타입 파라미터를 제한된 타입 파라미터(bounded type parameter)라한다.
public <T extends 상위타입> 리턴 타입 메소드명(매개변수,...){메소드}

public <T extends Number> boolean compare(T t1, T t2){
    double v1 = t1.doubleValue(); --> Number의 doubleValue() 메소드 사용
    double v2 = t2.doubleValue();  타입 파라미터가 Number타입으로 제한되면서 Object의 메소드뿐만 아니라 Number의 메소드도 사용할 수 있다.
    return (v1 == v2);            
}

와일드카드 타입 파라미터
제네릭 타입을 매개값이나 리턴 타입으로 사용할 때 타입 파라미터로 ?(와일드카드)를 사용할 수 있다.

public class Person{}  class Worker extends Person{}  class Student extends Person{}  class HighStudent extends Student{}  class MiddleStudent extends Student{}

타임 파라미터의 대체 타입으로 Studet와 자식 클래스만 가능하도록 매개변수를 선언한다면
리턴 타입 메소드명(제네릭타입<? extends Student>변수){메소드}

반대로 worker와 보모 클래스인 Person만 가능하도록 매개변수를 선언
리턴타입 메소드명(제네릭타입<? super Worker>변수){메소드}

어떤 타입이든 가능하도록 매개변수를 선언
리턴타입 메소드명(제네릭타입<?>변수){메소드}