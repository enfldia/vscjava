3. @Controller
  MVC패턴 설명과 똑같이 Controller은 MVC에서 C에 해당 하며 주로 사용자의 요청을 처리 한 후 지정된 뷰에 모델 객체를 넘겨주는 역할을 한다.

  사용자의 요청이 진입하는 지점이며 요청에 따라 어떤 처리를 할지 결정을 Service에 넘겨준다.

  그리고 Service에서 실질적으로 처리한 내용을 다시 Controller가 받고 받은것을 Controller가 넘겨주는 역할을 하는것이다.

  @Service
  서비스에는 사용자의 요구사항을 처리하는 로직이 있다.

  DB의 데이터가 필요할 때는 Repository 에게 요청을 한다.

  규모 프로젝트일 수록 Service의 내용이 비대해질 것이다.

  @Repository
  Entity에 의해 생성된 DB에 접근하는 메서드 들을 사용하기 위한 인터페이스입니다.

  쉽게 말해 DB 연결, 해제, 자원을 관리하고 CRUD 작업을 처리한다.
  

4, GetMapping, postMapping

  1. GET 란?
  - URL에 데이터를 포함시켜 요청
  -  데이터를 header를 포함하여 전송한다.
  - URL에 데이터가 노출되어 보안에 취약
  - 캐싱이 가능하다. (캐싱: 한번 접근후, 똑같은 요청을 할 시 빠르게 접근하기 위해 레지스터에 데이터를 저장시키는것)
  => 주로 조회할때만 사용
   GET 방식은 클라이언트에서 서버로 어떠한 리소스로 부터 정보를 요청하기 위해 사용되는 메서드입니다. 같은 리소스로부터 정보를 요청하면 그 값은 동일한 결과를 받아오기 때문에 조회하는 데 많이 사용이 됩니다. 또한 대용량의 데이터의 재조회를 막기 위해 첫 요청에 캐시를 해두고 재조회시 서버 요청 없이 캐시 된 데이터를 사용합니다. 반면에 쿼리스트링으로 전송되기 때문에 데이터의 길이가 제한되며, 보안에도 취약하다는 단점이 있습니다. 

  2. POST 란?
  - URL에 데이터를 노출하지 않고 요청
  - 데이터를 Body에 포함시킨다.
  - URL에 데이터가 노출되지 않아 GET방식보다 보안이 높음
  - 전송하는데 길이 제한이 없고 캐싱이 불가능하다.
  => 주로 노출되면 안되는 데이터를 저장할 때 사용
   POST 방식은 리소스를 생성 및 수정하기 위해 데이터를 보낼 때 주로 사용됩니다. POST 방식은 GET 방식과 다르게 Http Body에 리소스가 담겨 전송되기 때문에 데이터의 제한도 없을뿐더러 비교적 데이터 유출로부터 안전합니다.

  Spring을 공부하였을때 Get방식 즉, @GetMapping을 사용하여 loginRequest, joinRequest를 사용하였더니 URL에 아이디, 비밀번호 혹은 아이디, 비밀번호, 이름이 노출되는것을 확인하였다. 이것에 대한 해결방안으로 Get방식 (@GetMapping)이 아닌 Post(@PostMapping)방법을 사용하였다.

  1. @PostMapping : HTTP Post Method에 해당하는 단축 표현으로 서버에 리소스를 등록(저장)할 때 사용합니다.

  2. @GetMapping : HTTP Get Method에 해당하는 단축 표현으로 서버의 리소스를 조회할 때 사용합니다.