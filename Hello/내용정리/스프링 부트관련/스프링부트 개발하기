1.jdk - 자바코드의 번역과 실행 담당

2.jde - 개발 생산성을 높이는 프로그램
        (인텔리제이,sts,이클립스,NetBeans)

3. 프로젝트 : 실제 동작하는 코드의 묶음
            스프링 부트 프로젝트는 http://start.spring.io 에서 생성

자바에서 쓸 수 있는 서버 템플릿 엔진
jsp, velocity ,freemaker, thymeleaf, Mustache

- jsp, velocity : 과거에 사용되던 것들로 스프링부트에서 권장하지 않는 템플릿 엔지
- freemaker : 너무 과하게 많은 기능을 지원해서 배우기 어렵다.
- thymeleaf : 스프링 진영에서 적극적으로 지원하는 템플릿 엔진이지만 문법이 어렵다.
- Mustache :  문법이 다른 템플릿 엔진보다 쉽다.비즈니스 로직을 사용할 수 없다.=> view의 역할과 서버의 역할이 명확히 구분
                MVC 구조가 아니면 사용하기 어렵다.

-mustache 템플릿 파일을 호출하려면 반드시 컨트롤러를 통해 호출해야한다.
-머스테치의 파일 위치는 기본적으로 src/main/resoureces/templates이다.
-머스테치의 파일 확장자는 .mustache이다.(.html 파일 확장자를 .mustache로 생성하면 된다.)

1. controller 폴더 생성
    FirstController 파일 생성 후
    -localhost8080/hi 를 입력하면

    greetings와 연결해보시오

    ?? ???화면이 나오는 건
    application.propertiese에
    server.servlet.encoding.force-response=true
    추가

    localhost:8080/bey 를 입력하면
    nickname == 홍길동
    
    goodbye.mustache를 만들어서 
    홍길동님 다음에 또 만나요.
    

Mustache 문법
1.변수 출력
- {{variableName}}

2.섹션(조건문)사용:
- {{#condition}} 내용 {{/condition}}

3.이상적인 루프:
- {{#items}} {{name}} {{/items}}

4.다른 mustache 파일의 내용 가져오기
- {{>layout/header}}
- {{>layout/footer}}
5.리스트 내용 반복하기(반복문)
<!-- data 라는 리스트는 아래와 같은 JSON이라 가정한다-->
{
        "data":[
                {"name":"kim"},
                {"name":"lee"},
                {"name":"yun"},
        ]
}   
<!-- mustache 부분-->
{{#data}}
        <span>{{name}}</span> <<=!리스트에서 가져온 객체의 필드명을 넣어주면 된다-->
{{/data}}

- 위와 같이 작성하였을 경우
<span>kim</span>
<span>lee</span>
<span>yun</span>


Thymeleaf 문법
1.변수 출력
- ${variableName}
2.조건문(if) 사용:
- <div th:if="${condition}"> 내용 </div>


롬복(Lombok) - 자바 언어 라이브러리
1. 반복적인 코드 축약
2. java빈 (POJO), 데이터 객체, 동일성 및 해시코드 메서드 생성
3. 코드의 가독성 향상

룸복의 기능
1. @Gertter @Setter : 게터 세터 메서드 생성
2. @ToString
3. @EqualsAndHashCode: equals() 및 hashCode() 메서드를 자동으로 생성합니다.
4. @AllArgsConstructor : 일반적인 생성자
   @NoArgsConstructor : 기본 생성자
   @RequiredArgsConstructor : final 로 선언된 필드들을 인자로 받는 생성자를 생성

5. @Builder : 빌더패턴을 사용한 객체 생성
6. @Data : @ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgsConstructor를 포함한 모든 것을 자동으로 생성합니다.



