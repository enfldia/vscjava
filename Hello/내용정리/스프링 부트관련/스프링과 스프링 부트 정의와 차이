2. 스프링과 스프링 부트 차이

Spring 이란?

스프링 프레임워크(Spring Framework)는 Java 기반 애플리케이션 개발을 지원하는 오픈소스 애플리케이션 프레임워크로 간단히 스프링(Spring)이라고도 불립니다. 

순수 자바 객체(POJO)만을 사용하여 복잡성을 제거하고, 단순하고 가벼운 코드로 기업용 애플리케이션을 개발하기 위한 목적으로 개발된 프레임워크(Framework)입니다. POJO(Plain Old Java Object)는 특정한 규약이나 프레임워크에 종속되지 않는 간단하고 순수한 자바 객체를 의미합니다. POJO는 객체지향 개발의 원칙에 충실한 객체를 말하며, 특정한 제약이나 요구사항에 종속되지 않고 유연하고 확장 가능한 코드를 작성할 수 있도록 도와줍니다.

다양한 기능과 복잡한 시스템이나 개념을 간소화하며 개발자가 애플리케이션을 더 쉽게 개발하고 관리할 수 있도록 돕습니다. 스프링 프레임워크의 핵심 특징은 다음과 같습니다.

스프링의 대표적인 특징 4가지


제어 역전

스프링은 객체의 생명 주기 및 의존성 관리를 담당하는 IoC 컨테이너를 제공합니다. 개발자는 객체의 생성과 관계 설정을 스프링에 위임할 수 있으며, 스프링 컨테이너가 객체의 생명 주기를 관리하고 필요한 의존성을 주입합니다.


의존성 주입: 

스프링은 의존성 주입을 통해 객체 간의 관계를 설정합니다. 의존성 주입은 애플리케이션의 결합도를 낮추고 유연성과 테스트 용이성을 향상시킵니다.


AOP지원(관점 지향 프로그래밍)

 스프링은 AOP를 지원하여 애플리케이션의 핵심 비즈니스 로직과 부가적인 기능(로깅, 트랜잭션 관리 등)을 분리하여 모듈화할 수 있습니다.


웹 개발 지원

스프링은 웹 애플리케이션 개발을 위한 다양한 기능과 웹 프레젠테이션 계층을 제공합니다. 스프링 MVC는 유연하고 확장 가능한 웹 애플리케이션을 개발할 수 있는 MVC(Model-View-Controller) 아키텍처를 지원합니다.

이러한 특징들은 스프링을 사용하여 애플리케이션을 더 유연하고 모듈화된 구조로 개발하고 관리할 수 있도록 돕습니다. 하지만, 스프링이 제공하는 많은 장점에도, 몇 가지 문제점을 가지고 있습니다.

Spring의 문제점


spring-boot-version

스프링은 설정이 복잡해서 기업에서 스프링을 도입, 개발, 운영할 때 다음과 같은 몇 가지 어려움을 겪을 수 있습니다. 


설정의 복잡성

스프링은 강력한 기능을 제공하기 위해 많은 설정과 구성이 필요합니다. 이는 초기 설정의 복잡성을 증가시킬 수 있고, 초보자에게는 어렵게 느껴질 수 있습니다. 개발자들이 애플리케이션 컨텍스트 설정, 빈 정의, 다양한 컴포넌트 구성 등을 위해 많은 설정 코드를 작성해야 합니다.


높은 초기 학습 난이도

스프링은 다른 프레임워크에 비해 학습이 필요한 부분이 많습니다. 다양한 개념과 기능을 이해하고 사용하기 위해 시간과 노력이 필요할 수 있습니다.


의존성 관리 문제

전통적인 스프링 프레임워크에서는 여러 의존성과 그들의 버전을 관리하는 것이 복잡할 수 있습니다. 스프링 레거시에서는 의존성 주입(Dependency Injection)을 구현하기 위해 XML 설정 파일에 많은 수의 빈(Bean)을 등록해야 합니다. 이는 코드의 가독성을 떨어뜨리고, 의존성 관리가 어려워질 수 있습니다


별도 WAS 서버 구성의 번거로움

스프링을 웹상에서 사용하기 위해서는 별도의 Web Application Server(WAS)를 설치하고, 설정해야 합니다. 또한, 애플리케이션을 서비스하기 위해서 별도의 서버에 수동으로 배포해야 하는 번거로움이 있습니다.


스프링 부트(Spring Boot)는 스프링의 문제점을 해결해 주기 위해 개발된 스프링의 프레임워크로 개발자들이 더 쉽고 빠르게 스프링 애플리케이션을 개발하도록 도와주기 위해 개발되었습니다. 



개발 초기에 "스프링 부트 스타터"라는 프로젝트명으로 시작되었는데요. 이름에서도 느껴지듯이 간단한 설정과 구성을 통해 스프링 애플리케이션의 개발을 빠르게 시작할 수 있도록 도와주는 프로젝트였습니다. 시간이 흘러 프로젝트명은 "스프링 부트"로 변경되었고, 2014년 4월에 공식적으로 스프링 부트1.0이 출시되었습니다.



스프링 부트는 기업용 애플리케이션 개발을 더 쉽고 빠르게 하도록 도와주며, 모니터링, 건강 상태 확인(Health Check), 로깅, 설정관리 등 운영에 필요한 필수 기능을 내장하고 있는 프레임워크로 어떤 특징을 갖고 있는지 함께 살펴보겠습니다.



Spring Boot의 특징



spring-boot-devtools


스프링 부트는 기본적인 설정과 보일러 플레이트 코드(여러 곳에서 재사용되는 코드) 작성을 최소화하고, 자동 설정과 컨벤션을 통해 개발자들이 빠르게 애플리케이션을 개발할 수 있도록 지원하는 스프링 프레임워크입니다. 

스프링 부트를 사용하면 내장형 서버를 사용하여 별도의 웹 애플리케이션 서버(Web Application Server)를 설치할 필요 없이 애플리케이션을 실행할 수 있으며, 다양한 스프링 프레임워크 기능과 라이브러리, 서드파티 라이브러리와의 통합을 간편하게 구성할 수 있는데요. 주요 특징을 요약하면 다음과 같습니다.


간결한 설정

스프링 부트는 번거로운 XML 설정이 필요 없으며, 최소한의 설정으로 Spring을 사용할 수 있고, 기본적인 설정을 자동으로 처리하므로 개발자가 많은 설정 작업을 하지 않아도 됩니다. 설정으로 인한 불편사항을 해소하여 개발자는 애플리케이션 개발에 집중할 수 있습니다.


내장 서버

스프링 부트는 내장된 서버(내장 Tomcat, Jetty, Undertow)를 제공하여 별도의 서버 설정 없이 애플리케이션을 실행할 수 있습니다. 배포를 위해 War 파일을 생성해서 Tomcat에 배포할 필요 없으며, JAR 파일에는 모든 의존성 라이브러리가 포함되어 있어 외부 서버 없이도 애플리케이션을 실행할 수 있습니다. 이는 애플리케이션의 배포와 관리를 간편하게 만들어 줍니다.


의존성 관리 간소화

스프링 부트는 여러 3rd party 라이브러리를 사용할 때, 발생하는 라이브러리 버전 충돌로 인한 문제를 해결하기 위해서, 이미 테스트된 여러 라이브러리들의 묶음 패키지를 제공합니다. 

3rd party 의존성 관리를 용이하게 하기 위한 ‘starter’ 의존성 통합 모듈을 제공하여 Maven/Gradel 설정 시 버전 관리가 간편합니다. 스프링 부트에서 제공하는 의존성 세트를 통해 개발자는 버전 충돌이나 복잡한 의존성 설정에 대해 걱정하지 않고 필요한 의존성을 쉽게 지정할 수 있습니다.


운영 편의성

스프링 부트는 애플리케이션의 상태 모니터링, 로깅, 보안 설정 등 운영에 필요한 기능들을 제공합니다. 이를 통해 애플리케이션의 운영과 관리가 편리해지고 안정성이 향상됩니다.

스프링 부트는 스프링(Spring Legacy)의 장점은 그대로 계승하면서, 기존의 문제가 되는 부분을 보완하여 기업용 애플리케이션의 개발 생산성 및 서비스 운영, 성능을 모두 해결해 줄 수 있습니다. 


이렇듯 스프링 부트는 개발자들의 개발 생산성을 높이고, 애플리케이션의 유연성, 확장성을 제공할 뿐만 아니라, 스프링 프레임 워크들과 강력하게 호환되고, 생태계와의 통합을 가능하게 합니다. 이러한 장점을 가진 스프링 부트를 활용해서 업무에 적용할 수 있는 범위를 살펴보도록 하겠습니다.



Spring Boot를 활용할 수 있는 범위


spring-boot-initializr

스프링 부트는 스프링 기반의 웹 애플리케이션, 마이크로 서비스, RESTful API 등 다양한 애플리케이션의 개발을 간편하게 해주는 도구로 폭넓게 사용되고 있습니다. 대표적인 활용 범위를 예시한다면 다음과 같은 업무에 적용할 수 있습니다.


웹 애플리케이션 개발

스프링 부트는 웹 애플리케이션 개발에 적합한 프레임워크입니다. RESTful API, 웹 서비스, 마이크로 서비스 등 다양한 웹 애플리케이션을 개발할 수 있습니다. 내장된 톰캣 서버를 사용하거나 외부 서버에 배포하여 사용할 수 있습니다.


배치 처리 

스프링 부트는 배치 처리 작업에도 많이 사용됩니다. 대용량 데이터 처리, 일괄 작업, 정기적인 스케줄링 작업 등을 효과적으로 처리할 수 있습니다. 스프링 배치와의 통합을 통해 배치 처리 작업을 쉽게 개발하고 실행할 수 있습니다.


데이터 베이스 액세스

스프링 부트는 다양한 데이터베이스와의 연동을 지원합니다. JDBC, JPA, Spring Data JPA 등을 통해 데이터베이스 액세스를 간편하게 처리할 수 있습니다. 데이터베이스 연동에 필요한 설정과 관련된 작업을 자동화하여 개발자의 부담을 줄여줍니다.


보안과 인증 

스프링 부트는 보안과 인증에 필요한 기능을 제공합니다. 스프링 시큐리티와의 통합을 통해 다양한 보안 요구사항을 처리할 수 있습니다. 사용자 인증, 권한 부여, 세션 관리 등을 간편하게 구현할 수 있습니다.


클라우드 네이티브 애플리케이션 

스프링 부트는 클라우드 네이티브 애플리케이션 개발을 위한 기능을 제공합니다. 마이크로 서비스 아키텍처, 컨테이너화, 스케일링, 로깅 및 모니터링 등을 지원하여 클라우드 환경에서의 애플리케이션 개발과 배포를 용이하게 합니다.













Spring과 Spring Boot는 모두 스프링 프레임워크를 기반으로 한 자바 웹 개발 프레임워크입니다. 둘 간에는 몇 가지 차이점이 있습니다.

Spring은 스프링 프레임워크의 핵심 모듈을 모아서 만든 프레임워크입니다. Spring에서는 개발자가 직접 설정 파일을 작성하여 스프링 컨테이너를 구성하고, 필요한 빈 객체를 등록하고, 빈 객체 간의 의존성을 설정해야 합니다. Spring은 특정한 구성을 위해 추가적인 라이브러리와 설정이 필요합니다.

반면, Spring Boot는 스프링 프레임워크를 보다 쉽게 사용할 수 있도록 만든 프레임워크입니다. Spring Boot에서는 개발자가 설정 파일을 작성할 필요 없이, 프로젝트의 설정과 라이브러리 의존성을 자동으로 처리해주는 기능을 제공합니다. 또한, Spring Boot는 실행 가능한 JAR 파일을 만들 수 있습니다.

Spring Boot는 Spring에서 제공하는 여러 기능들을 자동으로 설정하여 개발자가 보다 쉽게 사용할 수 있도록 해줍니다. 예를 들어, Spring Boot는 스프링 MVC, 스프링 Data JPA, 스프링 Security 등의 기능을 자동으로 설정하며, 개발자가 별도로 설정 파일을 작성하지 않아도 사용할 수 있습니다. 또한, Spring Boot는 Actuator라는 모니터링과 관리를 위한 기능을 제공하여, 애플리케이션의 상태를 모니터링하고, 필요한 조치를 취할 수 있도록 해줍니다.

이러한 차이점들은 Spring과 Spring Boot의 사용 목적과 방식을 크게 달리 합니다. Spring은 개발자가 직접 설정 파일을 작성하고, 빈 객체를 등록하고, 빈 객체 간의 의존성을 설정하는 것을 요구합니다. 반면, Spring Boot는 개발자가 보다 쉽게 스프링을 사용할 수 있도록 설정과 의존성 처리 등을 자동으로 처리합니다. Spring은 스프링 프레임워크를 보다 세밀하게 제어하고자 하는 경우에, Spring Boot는 빠르고 간단하게 스프링 애플리케이션을 개발하고자 하는 경우에 사용됩니다.

간단 요약 : 스프링(Spring)은 프레임워크이며, 스프링 부트(Spring Boot)는 스프링 프레임워크를 기반으로 한 도구입니다. 스프링은 설정 파일을 작성해야 하지만, 스프링 부트는 자동 설정을 제공하여 간편하게 개발할 수 있습니다. 또한, 스프링 부트는 내장 서버를 제공하여 쉽게 웹 애플리케이션을 실행할 수 있습니다. Spring은 스프링 프레임워크를 보다 세밀하게 제어하고자 하는 경우에, Spring Boot는 빠르고 간단하게 스프링 애플리케이션을 개발하고자 하는 경우에 사용됩니다.